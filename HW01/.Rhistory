my_data <- read.delim("customers.txt")
my_data
my_data <- read.delim("customers.txt")
my_data
my_data[5]
age <- my_data
age
age[5]
age <- my_data[,1]
age
age[5]
#2. the fifth lowest age
sort(age, decreasing = False)
#2. the fifth lowest age
sort(age, decreasing = false)
#2. the fifth lowest age
sort(age, decreasing = F)
age[5]
#2. the fifth lowest age
sort(age, decreasing = F)[5]
#2. the fifth lowest age
sorted_age <- sort(age, decreasing = F)
sorted_age[5]
#3. extract the five lowest ages together
extract_sorted_age <- sorted_age[1:5]
extract_sorted_age
#5. average age
sorted_age <- sort(age, decreasing = TRUE)
sorted_age
#4. get the five highest ages by first sorting them in decreasing order first
sorted_age <- sort(age, decreasing = TRUE)
sorted_age
extract_sorted_age <- sorted_age[1:5]
extract_sorted_age
#5. average age
mean(age)
#5. average age
mean(age)
ans <- c(c(1, 2), c(2, 3))
ans
ans <- c(c(1, 2), c(2, 3), c(4, 5))
ans
type(ans)
ans <- c(1,'c',3,4,5)
type(ans)
typeof(ans)
ans <- c(c(1, 2), c(2, 3), c(4, 5))
typeof(ans)
ans <- c(1,'c',3,4,5)
typeof(ans)
sum(age_diff) / length(age_diff)
#7. Make a new variable called age_diff, with the difference between each age and the mean age
age_diff <- age - mean(age)
age_diff
#8.
mean(age_diff)
sum(age_diff) / length(age_diff)
#8.
#mean(age_diff)
sum(age_diff) / length(age_diff)
#8.
#mean(age_diff)
sum(age_diff) / length(age_diff)
#1. find the 5th element in the original list of ages
my_data <- read.delim("customers.txt")            # import data from customers.txt into my_data
my_data
age <- my_data[,1]                                # the array age will get the data in my_data
age[5]
#1. find the 5th element in the original list of ages
my_data <- read.delim("customers.txt")            # import data from customers.txt into my_data
my_data
age <- my_data[,1]                                # the array age will get the data in my_data
age[5]
#2. the fifth lowest age
sorted_age <- sort(age, decreasing = F)           # sort the data in ascending order and put the result into sorted_age
sorted_age[5]
#1. find the 5th element in the original list of ages
my_data <- read.delim("customers.txt")            # import data from customers.txt into my_data
my_data
age <- my_data[,1]                                # the array age will get the data in my_data
age[5]
#1. find the 5th element in the original list of ages
my_data <- read.delim("customers.txt")            # import data from customers.txt into my_data
my_data
age <- my_data[,1]                                # the array age will get the data in my_data
age[5]
knitr::opts_chunk$set(message = TRUE)
#1. find the 5th element in the original list of ages
my_data <- read.delim("customers.txt")            # import data from customers.txt into my_data
my_data
age <- my_data[,1]                                # the array age will get the data in my_data
age[5]
#6 standard deviation of age
sd(age)                                         # use sd() to get the standard deviation of age
knitr::opts_chunk$set(message = TRUE)
knitr::opts_chunk$set(message = TRUE)
knitr::opts_chunk$set(message = TRUE)
#3. extract the five lowest ages together
extract_sorted_age <- sorted_age[1:5]             # put the 1st ~ 5th element of sorted_age into extract_sorted_age
extract_sorted_age
#2. the fifth lowest age
sorted_age <- sort(age, decreasing = F)           # sort the data in ascending order and put the result into sorted_age
sorted_age[5]
#6 standard deviation of age
sd(age)                                         # use sd() to get the standard deviation of age
#1. find the 5th element in the original list of ages
my_data <- read.delim("customers.txt")            # import data from customers.txt into my_data
my_data
age <- my_data[,1]                                # the array age will get the data in my_data
age[5]
#2. the fifth lowest age
sorted_age <- sort(age, decreasing = F)           # sort the data in ascending order and put the result into sorted_age
sorted_age[5]
#3. extract the five lowest ages together
extract_sorted_age <- sorted_age[1:5]             # put the 1st ~ 5th element of sorted_age into extract_sorted_age
extract_sorted_age
#4. get the five highest ages by first sorting them in decreasing order first
sorted_age <- sort(age, decreasing = TRUE)        # sort the data in decreasing order and put the result into sorted_age
sorted_age
extract_sorted_age <- sorted_age[1:5]
extract_sorted_age
#5. average age
mean(age)                                        # use mean() to get the average age
#6 standard deviation of age
sd(age)                                         # use sd() to get the standard deviation of age
#7. Make a new variable called age_diff, with the difference between each age and the mean age
age_diff <- age - mean(age)
age_diff
#1. find the 5th element in the original list of ages
my_data <- read.delim("customers.txt")            # import data from customers.txt into my_data
my_data
age <- my_data[,1]                                # the array age will get the data in my_data
age[5]
#2. the fifth lowest age
sorted_age <- sort(age, decreasing = F)           # sort the data in ascending order and put the result into sorted_age
sorted_age[5]
#3. extract the five lowest ages together
extract_sorted_age <- sorted_age[1:5]             # put the 1st ~ 5th element of sorted_age into extract_sorted_age
extract_sorted_age
#4. get the five highest ages by first sorting them in decreasing order first
sorted_age <- sort(age, decreasing = TRUE)        # sort the data in decreasing order and put the result into sorted_age
sorted_age
extract_sorted_age <- sorted_age[1:5]
extract_sorted_age
#5. average age
mean(age)                                        # use mean() to get the average age
#6 standard deviation of age
sd(age)                                         # use sd() to get the standard deviation of age
#7. Make a new variable called age_diff, with the difference between each age and the mean age
age_diff <- age - mean(age)
age_diff
#6 standard deviation of age
sd(age)                                         # use sd() to get the standard deviation of age
#6 standard deviation of age
sd(age)                                         # use sd() to get the standard deviation of age
#7. Make a new variable called age_diff, with the difference between each age and the mean age
age_diff <- age - mean(age)
age_diff
#8.
#mean(age_diff)
sum(age_diff) / length(age_diff)
#9.
# Plot a histogram of age
hist(age, main = "histogram of age", xlab = "age")
# Plot a density plot of age
plot(density(age), main = "Density plot of age", xlab = "age")
par(mfrow = c(1,2)) # Set up a 1x2 plotting grid
boxplot(age, main = "Boxplot of age")
# Draw a stripchart of age
stripchart(age, method = "jitter", vertical = TRUE, add = TRUE, pch = 20, col = "blue")
par(mfrow = c(1,2)) # Set up a 1x2 plotting grid
boxplot(age, main = "Boxplot of age")
# Draw a stripchart of age
stripchart(age, method = "jitter", vertical = TRUE, add = TRUE, pch = 20, col = "blue")
# Draw a stripchart of age
stripchart(age, method = "jitter", vertical = TRUE, pch = 20, col = "blue")
par(mfrow = c(1,2)) # Set up a 1x2 plotting grid
boxplot(age, main = "Boxplot of age")
# Draw a stripchart of age
stripchart(age, method = "jitter", vertical = TRUE, pch = 20, col = "blue")
par(mfrow = c(1,2)) # Set up a 1x2 plotting grid
boxplot(age, main = "Boxplot of age")
# Draw a stripchart of age
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, pch = 20, col = "blue")
#par(mfrow = c(1,2)) # Set up a 1x2 plotting grid
boxplot(age, main = "Boxplot of age")
# Draw a stripchart of age
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, pch = 20, col = "blue")
#title("Stripchart of age")
boxplot(age, main = "Boxplot of age") #draw a boxplot of age and show the result
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, pch = 20, col = "blue") # Draw a stripchart of age and show the result
boxplot(age, main = "Boxplot of age") #draw a boxplot of age and show the result
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, pch = 20, col = "blue") # Draw a stripchart of age and show the result
boxplot(age, main = "Boxplot of age") #draw a boxplot of age and show the result
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, pch = 20, col = "blue") # Draw a stripchart of age and show the
#draw a boxplotof age
boxplot(age, main = "Boxplot of age")
# Draw a stripchart of age
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, pch = 20, col = "blue")
boxplot(age, main = "Boxplot of age")
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, pch = 20, col = "blue")
boxplot(age, main = "Boxplot of age")
# Draw a stripchart of age
stripchart(my_data$age, add = TRUE, method = "jitter", vertical = TRUE, pch = 20, col = "blue")
boxplot(age, main = "Boxplot of age")
# Draw a stripchart of age
stripchart(age, add = TRUE, vertical = TRUE, method = "jitter", pch = 20, col = "blue")
#title("Stripchart of age")
#(c) boxplot + stripchart
boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
stripchart(age, add = TRUE, vertical = TRUE, method = "jitter", pch = 20, col = "blue") #draw a stripchart of age and merge it
boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
stripchart(age, add = TRUE, vertical = TRUE, method = "jitter", pch = 20, col = "blue") #draw a stripchart of age and merge it
boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
stripchart(age, add = TRUE, vertical = TRUE, method = "jitter", pch = 20, col = "blue") #draw a stripchart of age and merge it
boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
stripchart(age, add = TRUE, vertical = TRUE, method = "jitter", col = "blue", pch = 20) #draw a stripchart of age and merge it
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20) #draw a stripchart of age and merge it
boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20) #draw a stripchart of age and merge it
knitr::opts_chunk$set(echo = TRUE)
par(mfrow = c(1, 2))
boxplot(data, ylab = "Ages", main = "Box plot")
summary(cars)
print(data[[1]][5])
#boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
#stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20) #draw a stripchart of age and merge it
par(mfrow = c(1, 2))
boxplot(age, ylab = "Ages", main = "Box plot")
stripchart(age, xlab = "Ages", main = "Stripchart")
#boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
#stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20) #draw a stripchart of age and merge it
par(mfrow = c(1, 2))
boxplot(age, ylab = "Ages", main = "Box plot")
stripchart(age,add = TRUE, xlab = "Ages", main = "Stripchart")
#boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
#stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20) #draw a stripchart of age and merge it
#par(mfrow = c(1, 2))
boxplot(age, ylab = "Ages", main = "Box plot")
stripchart(age, xlab = "Ages", main = "Stripchart")
#boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
#stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20) #draw a stripchart of age and merge it
#par(mfrow = c(1, 2))
boxplot(age, ylab = "Ages", main = "Box plot")
stripchart(age, add = T, xlab = "Ages", main = "Stripchart")
stripchart(age, add = TRUE, xlab = "Ages", main = "Stripchart")
#boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
#stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20) #draw a stripchart of age and merge it
#par(mfrow = c(1, 2))
boxplot(age, ylab = "Ages", main = "Box plot")
stripchart(age, add = TRUE, xlab = "Ages", main = "Stripchart")
#boxplot(age, main = "Boxplot of age")           #draw a boxplot of age
#stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20) #draw a stripchart of age and merge it
boxplot(age, ylab = "Ages", main = "Box plot")
stripchart(age, add = TRUE, xlab = "Ages", main = "Stripchart")
stripchart(age, col = 'blue', xlab = "Ages", main = "Stripchart")
stripchart(age, col = 'blue', xlab = "Ages", main = "Stripchart", pch = 19)
boxplot(age, main = "age")
stripchart(age, add = TRUE, method = "jitter", vertical = TRUE, col = "blue", pch = 20)
stripchart(age, method = "jitter", vertical = TRUE, col = "blue", pch = 20)
par(mfrow = c(1, 2))
boxplot(age, main = "age")
stripchart(age, method = "jitter", vertical = TRUE, col = "blue", pch = 20)
boxplot(age, main = "age")
stripchart(age, method = "jitter", vertical = TRUE, col = "blue", pch = 20)
boxplot(age, main = "age")
stripchart(age, add = T, method = "jitter", vertical = TRUE, col = "blue", pch = 20)
#boxplot(age, main = "age")
#stripchart(age, add = T, method = "jitter", vertical = TRUE, col = "blue", pch = 20)
library(ggplot2)
#boxplot(age, main = "age")
#stripchart(age, add = T, method = "jitter", vertical = TRUE, col = "blue", pch = 20)
library(ggplot2)
ggplot(age, aes(x=dose, y=len)) +
geom_boxplot()+
geom_jitter(position=position_jitter(0.2))+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
theme_classic()
ggplot(my_data, aes(x=dose, y=len)) +
geom_boxplot()+
geom_jitter(position=position_jitter(0.2))+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
theme_classic()
ggplot(my_data) +
geom_boxplot()+
geom_jitter(position=position_jitter(0.2))+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
theme_classic()
ggplot(my_data) +
geom_boxplot()+
geom_jitter()
ggplot(my_data) +
geom_boxplot(aes(x="", y =age))+
geom_jitter()
ggplot(my_data, aes(x = "", y = age)) +
geom_boxplot()+
geom_jitter()
#8.average difference between each age and the mean age
mean(age_diff)
install.packages('tinytex')
tinytex::install_tinytex()
